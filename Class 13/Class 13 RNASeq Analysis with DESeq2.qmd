---
title: "Class 13: RNASeq Analysis with DESeq2"
author: "Clarissa Savko (PID: A69028482)"
format: pdf
---

The data for this hands-on session comes from a published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014).

```{r}
#| message: false
library(DESeq2)
```

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names = 1)
metadata <- read.csv("airway_metadata.csv")
```

Q1. How many genes are in this dataset? 
```{r}
head(counts)
nrow(counts)
```
There are 38694 genes.

Q2. How many ‘control’ cell lines do we have? 

```{r}
sum(metadata$dex=="control")
```
```{r}
table(metadata$dex)
```

There are 4 control cell lines.


```{r}
head(counts)
```

I want to compare the control to the treated columns. To do this I will:
1) Identify and extract the "control" columns
2) Calculate the mean value per gene for all of these "control" columns and save as `control.mean`
3) Repeat for the "treated" columns
4) Compare `control.mean` vs. `treated.mean`



Step 1:
```{r}
control.inds <- metadata$dex=="control"
```

```{r}
metadata[control.inds,]
```

```{r}
head(counts[,control.inds])
```
Step 2: 
```{r}
control.mean <- rowMeans(counts[,control.inds])
head(control.mean)
```

Step 3:
```{r}
treated.inds <- metadata$dex=="treated"
treated.inds
```

```{r}
metadata[treated.inds,]
```
```{r}
head(counts[,treated.inds])
```

Q3. How would you make the above code in either approach more robust? Is there a function that could help here? 

Using mean rather than manually dividing by the total number of values is a more robust way to avoid making mistakes or finding the total of large sample group.


Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)
```{r}
treated.mean <- rowMeans(counts[,treated.inds])
head(treated.mean)
```


Let's combine our meancount data for bookkeeping purposes.
```{r}
mean.counts <- data.frame(control.mean, treated.mean)
```

Let's see what these count values look like...

Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

```{r}
plot(mean.counts)
```
Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot? 
geom_point()
```{r}
library(ggplot2)
ggplot(mean.counts) +
  aes(control.mean, treated.mean) +
  geom_point(alpha=0.2)
```

```{r}

plot(mean.counts, log="x")
```
Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?
log="xy"
```{r}
plot(mean.counts, log="xy")
```

Logs are super useful when we have such skewed data. They are also handy when we are most interested in orders of magnitude/fold change.

If there is no fold change, log2 will be 0.

```{r}
log2(10/10)
```

```{r}
log2(100/10)
```

Add log2 (fold-change) values ot our new results table.

```{r}
mean.counts$log2fc <- 
  log2(mean.counts$treated.mean/mean.counts$control.mean)
```

```{r}
head(mean.counts)
```
I need to exclude any genes with zero counts as we can't say interpret anything or calculate fold change.

```{r}
# What values in the first two columns are zero
to.remove.inds <- rowSums(mean.counts[,1:2]==0) > 0
mycounts <- mean.counts[!to.remove.inds,]
#mycounts
```
Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?
The arr.ind argument will identify which rows and columns have zero values. The unique() function will ensure we don't count any rows or columns twice.


```{r}
nrow(mycounts)
```
Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level? 

250

Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level? 

367

```{r}
sum(mycounts$log2fc > 2)
sum(mycounts$log2fc < -2)
```

367


Q10. Do you trust these results? Why or why not?


No, we only have a comparison of the mean values but no individual data points to perform statistics.

Like many bioconductor analysis packages DESeq wants it's input in a very particular way.

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts, 
                       colData = metadata,
                       design=~dex)
```

```{r}
dds <- DESeq(dds)
```

To get the results out of this `dds` object we can use the DESeq `results()` function.

```{r}
res <- results(dds)
head(res)
```
A common summary visualization is called a Volcano plot.

```{r}
plot(res$log2FoldChange, -log(res$padj),
     xlab="Log2 Fold-Change",
     ylab="-log P-value")
abline(v=c(-2,2), col="red")
abline(h=(-log(0.05)), col="blue")
```
```{r}
mycols <- rep("gray", nrow(res))
mycols[res$log2FoldChange > 2 ] <- "black"
mycols[res$log2FoldChange < -2] <- "black"
mycols[res$padj > 0.05] <- "gray"
```

```{r}
plot(res$log2FoldChange, -log(res$padj), col=mycols,
     xlab="Log2 Fold-Change",
     ylab="-log P-value")
abline(v=c(-2,2), col="red")
abline(h=(-log(0.05)), col="blue")
```
save our results

```{r}
write.csv(res, file="myresults.csv")
```

#Adding annotation data
We need to translate or "map" our ensemble IDs into more understandable gene names and the identifiers that other useful databases use.

```{r}
BiocManager::install("AnnotationDbi")
BiocManager::install("org.Hs.eg.db")
library("AnnotationDbi")
library("org.Hs.eg.db")
```
```{r}
columns(org.Hs.eg.db)
```
```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="SYMBOL",     # The new format we want to add
                     multiVals="first")
```

```{r}
head(res)
```
Q.11 Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called `res$entrez`, `res$uniprot` and `res$genename`.

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="ENTREZID",     # The new format we want to add
                     multiVals="first")
```

```{r}
head(res)
```

```{r}
res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="UNIPROT",     # The new format we want to add
                     multiVals="first")
```
```{r}
head(res)

```
```{r}
res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="GENENAME",     # The new format we want to add
                     multiVals="first")
```
```{r}
head(res)
```
```{r}
BiocManager::install(c("pathview", "gage", "gageData"))
```

```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}

keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
attributes(keggres)

```
```{r}
head(keggres$less, 3)
```
```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```
![](hsa05310.pathview.png)
